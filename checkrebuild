#!/bin/bash
#
# Detect broken packages that need to be rebuilt

shopt -s nullglob
shopt -s extglob

log="$(mktemp -d)"
trap 'rm -rf "$log"' EXIT

verbose=0
while getopts "vi:" OPTION; do
    case $OPTION in
        v) verbose=1 ;;
        i) include+=("$OPTARG") ;;
        *) exit 1 ;;
    esac
done

get_unofficial_pkgs() {
    mapfile -t repos_to_skip < <(for repo in $(pacconf --repo-list); do pacconf --repo="$repo" Server | grep -q "file://" || [[ " ${include[@]} " =~ " $repo " ]] || echo "$repo"; done)
    comm -23 <(pacman -Qq | sort) <(pacman -Sql "${repos_to_skip[@]}" 2>/dev/null | sort)
}

filter_executable() {
    while read -r file; do
        [[ -f "$file" && -x "$file" ]] && echo "$file"
    done
}

get_package_files() {
    xargs pacman -Qql |
    perl -pe 's/\n/\0/' |
    xargs -0 readlink -f |
    filter_executable
}

check_broken_ldd() {
    ldd "$1" 2>/dev/null |
    grep "not found" > >( out="$(cat)"; f="$RANDOM"; [ -n "$out" ] && { echo -e "\nldd $1\n" >> "$log/$f"; c++filt "$out" >> "$log/$f"; } ) &&
    pacman -Qqo "$1"
}

get_broken_ldd_pkgs() {
    export -f check_broken_ldd
    export log
    get_unofficial_pkgs |
    get_package_files |
    parallel --will-cite 'check_broken_ldd "{}"'
}

get_broken_python_pkgs() {
    command -v python >/dev/null || return
    python_version="$(python3 -c 'import sys; print (sys.version_info.minor)')"
    pacman -Qqo /usr/lib/python3.!("$python_version") 2>/dev/null
}

get_broken_perl_pkgs() {
    command -v perl >/dev/null || return
    perl_version="$(perl -E 'say $^V =~ /(\d+[.]\d+)/')"
    pacman -Qqo /usr/lib/perl*/!("$perl_version") 2>/dev/null
}

get_broken_ruby_pkgs() {
    command -v ruby >/dev/null || return
    ruby_version="$(ruby -e 'puts RUBY_VERSION')"
    pacman -Qqo /usr/lib/ruby/gems/!("$ruby_version") 2>/dev/null
}

get_broken_haskell_pkgs() {
    command -v ghc >/dev/null || return
    haskell_version="$(ghc --numeric-version)"
    pacman -Qqo /usr/lib/ghc-!("$haskell_version") 2>/dev/null
}

get_broken_pkgs() {
    {
        get_broken_ldd_pkgs
        get_broken_python_pkgs
        get_broken_perl_pkgs
        get_broken_ruby_pkgs
        get_broken_haskell_pkgs
    } | sort -u
}

get_repo_pkgs() {
    pacman -Sl | cut -d' ' -f1-2
    pacman -Qqm | awk '{print "foreign", $0}'
}

join -12 <(get_repo_pkgs | sort -k2) <(get_broken_pkgs) | awk '{ print $2 "\t" $1 }'

if (( verbose )); then
    cd "$log"
    for f in *; do
        cat "$f"
    done
fi

exit 0
